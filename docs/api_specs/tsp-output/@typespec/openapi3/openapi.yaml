openapi: 3.0.0
info:
  title: Cinema Demo API
  version: 0.0.0
tags:
  - name: Authentication
  - name: Movie Endpoint
  - name: Screening Endpoint
paths:
  /auth/login:
    post:
      tags:
        - Authentication
      operationId: Authentication_Login
      summary: Login user
      description: Login a user to the application, generating a JWT token
      parameters: []
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/authModels.loginResponse'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/authModels.loginRequest'
  /auth/register:
    post:
      tags:
        - Authentication
      operationId: Authentication_Register
      summary: Register user
      description: Register a new application user
      parameters: []
      responses:
        '201':
          description: The request has succeeded and a new resource has been created as a result.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/authModels.registerResponse'
        '400':
          description: The server could not understand the request due to invalid syntax.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/errors.usernameTaken'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/authModels.registerRequest'
  /movie:
    get:
      tags:
        - Movie Endpoint
      operationId: MovieEndpoint_GetMovies
      summary: Get all
      description: Retrieve a list of movies
      parameters: []
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/movieModels.moviesPayload'
        '204':
          description: 'There is no content to send for this request, but the headers may be useful. '
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errors.noContent'
    post:
      tags:
        - Movie Endpoint
      operationId: MovieEndpoint_Create
      summary: Post
      description: Create a new movie
      parameters: []
      responses:
        '201':
          description: The request has succeeded and a new resource has been created as a result.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/movieModels.specificMoviePayload'
        '400':
          description: The server could not understand the request due to invalid syntax.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errors.badRequest'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/movieModels.postMovie'
    put:
      tags:
        - Movie Endpoint
      operationId: MovieEndpoint_Update
      summary: Put
      description: Update a movie
      parameters: []
      responses:
        '201':
          description: The request has succeeded and a new resource has been created as a result.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/movieModels.specificMoviePayload'
        '400':
          description: The server could not understand the request due to invalid syntax.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errors.badRequest'
        '404':
          description: The server cannot find the requested resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errors.notFound'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/movieModels.postMovie'
    delete:
      tags:
        - Movie Endpoint
      operationId: MovieEndpoint_Delete
      summary: Delete
      description: Delete a movie
      parameters:
        - name: movieId
          in: query
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/movieModels.specificMoviePayload'
        '404':
          description: The server cannot find the requested resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errors.notFound'
  /movie/{id}:
    get:
      tags:
        - Movie Endpoint
      operationId: MovieEndpoint_GetMovie
      summary: Get
      description: Retrieve a specific movie based on movieId
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/movieModels.specificMoviePayload'
        '404':
          description: The server cannot find the requested resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errors.notFound'
  /screening:
    get:
      tags:
        - Screening Endpoint
      operationId: ScreeningEndpoint_GetAll
      summary: Get all
      description: Get a array of screenings
      parameters: []
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/screeningModels.multipleScreeningPayload'
        '204':
          description: 'There is no content to send for this request, but the headers may be useful. '
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errors.noContent'
    post:
      tags:
        - Screening Endpoint
      operationId: ScreeningEndpoint_Create
      summary: Post
      description: Create a new screening
      parameters: []
      responses:
        '201':
          description: The request has succeeded and a new resource has been created as a result.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/screeningModels.specificScreeningPayload'
        '400':
          description: The server could not understand the request due to invalid syntax.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errors.badRequest'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/screeningModels.postScreening'
    put:
      tags:
        - Screening Endpoint
      operationId: ScreeningEndpoint_Update
      summary: Put
      description: Update a screening value
      parameters: []
      responses:
        '201':
          description: The request has succeeded and a new resource has been created as a result.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/screeningModels.specificScreeningPayload'
        '400':
          description: The server could not understand the request due to invalid syntax.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errors.badRequest'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/screeningModels.postScreening'
  /screening/{screeningId}/{movieId}:
    get:
      tags:
        - Screening Endpoint
      operationId: ScreeningEndpoint_Get
      summary: Get
      description: Get a specific screening, defined by both screeningId and movieId
      parameters:
        - name: screeningId
          in: path
          required: true
          schema:
            type: integer
        - name: movieId
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/screeningModels.specificScreeningPayload'
        '404':
          description: The server cannot find the requested resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errors.notFound'
    delete:
      tags:
        - Screening Endpoint
      operationId: ScreeningEndpoint_Delete
      summary: Delete
      description: Delete a screening
      parameters:
        - name: screeningId
          in: path
          required: true
          schema:
            type: integer
        - name: movieId
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/screeningModels.specificScreeningPayload'
        '404':
          description: The server cannot find the requested resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errors.notFound'
components:
  schemas:
    authModels.loginRequest:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
        password:
          type: string
    authModels.loginResponse:
      type: object
      required:
        - id
        - username
        - email
        - role
        - token
      properties:
        id:
          type: string
        username:
          type: string
        email:
          type: string
        role:
          type: string
        token:
          type: string
    authModels.registerRequest:
      type: object
      required:
        - email
        - username
        - password
      properties:
        email:
          type: string
        username:
          type: string
        password:
          type: string
    authModels.registerResponse:
      type: object
      required:
        - email
        - username
        - role
      properties:
        email:
          type: string
        username:
          type: string
        role:
          type: string
    errors.badRequest:
      type: object
      required:
        - code
        - message
      properties:
        code:
          type: number
          enum:
            - 400
        message:
          type: string
          enum:
            - Bad request
    errors.emailTaken:
      type: object
      required:
        - code
        - message
      properties:
        code:
          type: number
          enum:
            - 400
        message:
          type: string
          enum:
            - email taken
    errors.noContent:
      type: object
      required:
        - code
        - message
      properties:
        code:
          type: number
          enum:
            - 204
        message:
          type: string
          enum:
            - No content
    errors.notFound:
      type: object
      required:
        - code
        - message
      properties:
        code:
          type: number
          enum:
            - 404
        message:
          type: string
          enum:
            - Not found
    errors.usernameTaken:
      type: object
      required:
        - code
        - message
      properties:
        code:
          type: number
          enum:
            - 400
        message:
          type: string
          enum:
            - Username taken
    movieModels.movie:
      type: object
      required:
        - id
        - title
        - description
        - runtime
        - year
        - rating
      properties:
        id:
          type: integer
        title:
          type: string
        description:
          type: string
        runtime:
          type: integer
        year:
          type: integer
        rating:
          type: string
    movieModels.moviesPayload:
      type: object
      required:
        - status
        - responseTime
        - data
      properties:
        status:
          type: string
        responseTime:
          type: string
        data:
          type: array
          items:
            $ref: '#/components/schemas/movieModels.movie'
    movieModels.postMovie:
      type: object
      required:
        - title
        - description
        - runtime
        - year
        - rating
      properties:
        title:
          type: string
        description:
          type: string
        runtime:
          type: integer
        year:
          type: integer
        rating:
          type: string
    movieModels.specificMoviePayload:
      type: object
      required:
        - status
        - responseTime
        - data
      properties:
        status:
          type: string
        responseTime:
          type: string
        data:
          $ref: '#/components/schemas/movieModels.movie'
    screeningModels.multipleScreeningPayload:
      type: object
      required:
        - status
        - responseTime
        - data
      properties:
        status:
          type: string
        responseTime:
          type: string
        data:
          type: array
          items:
            $ref: '#/components/schemas/screeningModels.screening'
    screeningModels.postScreening:
      type: object
      required:
        - movieId
        - theaterId
        - startTime
      properties:
        movieId:
          type: integer
        theaterId:
          type: integer
        startTime:
          type: string
    screeningModels.screening:
      type: object
      required:
        - id
        - movie
        - theater
        - tickets
        - startTime
      properties:
        id:
          type: integer
        movie:
          $ref: '#/components/schemas/movieModels.movie'
        theater:
          $ref: '#/components/schemas/theaterModels.theater'
        tickets:
          type: array
          items: {}
        startTime:
          type: string
    screeningModels.specificScreeningPayload:
      type: object
      required:
        - status
        - responseTime
        - data
      properties:
        status:
          type: string
        responseTime:
          type: string
        data:
          $ref: '#/components/schemas/screeningModels.screening'
    seatModels.seat:
      type: object
      required:
        - id
        - row
        - seatNumber
      properties:
        id:
          type: integer
        row:
          type: integer
        seatNumber:
          type: integer
    theaterModels.theater:
      type: object
      required:
        - id
        - capacity
        - name
        - seats
      properties:
        id:
          type: integer
        capacity:
          type: integer
        name:
          type: string
        seats:
          type: array
          items:
            $ref: '#/components/schemas/seatModels.seat'
servers:
  - url: sgcinemad.azurewebsites.net
    description: Azure hosted site
    variables: {}
